@article{Reference1,
	Abstract = {Design of an enterprise information system significantly impacts its development and maintenance efforts. The research shows that maintenance consumes about 65-75% of the software development time and about 40-60% of maintenance efforts are devoted to software understanding [2, 9]. This paper compares the Aspect-driven design approach as applied to the three-layered architecture to the MVC-like design approach implemented by many conventional web frameworks. While both approaches strive to avoid information restatement, they differ greatly in the underlying idea; thus, this work compares based on development efficacy and ease of maintenance. We highlight their differences and qualities, such as information cohesion, coupling and restatement, and discuss their maintenance efforts. We also investigate their ease of use, deployments, and provide recommendations on when to use each approach. © 2015 ACM.},
	Author = {Karel Cemus and Tomas Cerny and Lubos Matl and Michael J. Donahoo},
	Journal = {Proceedings of the 2015 Conference on research in adaptive and convergent systems (RACS). ACM},
	Month = {10},
	Numpages = {7},
	Pages = {330-336},
	Title = {Enterprise Information Systems : Comparison of Aspect-driven and MVC-like Approaches},
	URL = {https://dl.acm.org/citation.cfm?doid=2811411.2811477},
	Year = {2015}}

@article{Reference3,
	Author = {Ariel Ortiz Ramirez},
	Journal = {Linux Journal},
	Month = {7},
	Numpages = {4},
	Title = {Three-Tier Architecture},
	URL = {https://www.linuxjournal.com/article/3508},
	Year = {2000}}

@article{Reference2,
	Abstract = {Along with the progressive development of college teaching management reformation, laboratory construction is becoming more standard and more complicated, and college laboratory management has become more onerous and complex. In order to facilitate the expansion of the management, improve work efficiency, and simplify our work, computer-aided management is necessary. The system in this paper was designed and developed based on it. Experiment teaching management system is a solution based on Pet Shop architecture; it adopted .NET framework, the three-tier structure, B/S mode and OOP; it used SQL Server 2008 as a database management tool, so its module reuse rate is high and its maintenance cost is low. The system is convenient, flexible and efficient, and it can achieve the interaction among the teaching management staff, lab administrators, teachers and students.},
	Author = {Xuebin Chen and Shufen Zhang},
	Journal = {8th International Conference on Computer Science and Education Computer Science and Education (ICCSE)},
	Month = {4},
	Numpages = {5},
	Pages = {1298-1302},
	Title = {Experiment teaching management system based on three-layer architecture},
	URL = {http://eds.a.ebscohost.com/eds/detail/detail?vid=0&sid=1e19995b-4b66-4809-a426-e0a4ac683f32%40sessionmgr4008&bdata=JnNpdGU9ZWRzLWxpdmU%3d#AN=edseee.6554122&db=edseee},
	Year = {2013}}

@article{Reference4,
	Abstract = {From the early 1990s, Web Systems emerged with the expansion of the Internet around the world. These systems were initially supported by a client-server architecture and three standards (URL, HTTP and HTML), and has considerably evolved in the last two decades. Usability, scalability, maintenance, portability, robustness, security and integration with other systems are the main challenges of this software category. This tutorial presents the history and evolution of Web-based software architectures. We discuss current software architectural styles, patterns, and development platforms based on client-side (React JS, Angular JS and Vue Js) and server-side (Spring and Node.js) technologies. In addition, we also discuss Web 3.0 requirements such as communication protocols, Microservices, MV* browser-based frameworks, boilerplates client-side code, asynchronous programming, and integration with cloud computing infrastructures.},
	Author = {Raoni Kulesza and Matheus Lima and Claudiomar Araujo and Marcelo F. de Sousa and Aguinaldo M. Filho},
	Journal = {WebMedia 2018 - Proceedings of the 24th Brazilian Symposium on Multimedia and the Web},
	Month = {4},
	Numpages = {3},
	Pages = {11-13},
	Title = {Evolution of software architectures: From Web 1.0 to Web 3.0 systems},
	Year = {2018}}

@article{Reference5,
	Abstract = {The architectural design of a client-server system affects the initial develop- ment cost, day-to-day transactional performance, ongoing maintenance costs. and long-term flexibility and scalability of the application. The choice between a two- and three-tier architecture should be based on the scope and complexity of a project, the time available for completion, and the expected enhancement or obsolescence of the system. A three-tier architecture requires more planning and support than a two-tier architecture, but it offers advantages in open- ness, flexibility, scalability, and integration.},
	Author = {John M. Gallaugher and Suresh C. Rarnanathan},
	Journal = {Information Systems Management},
	Numpages = {7},
	Volume = {13},
	Pages = {7-13},
	Title = {Choosing a client/server architecture: A comparison of Two-and Three-Tier systems},
	Url = {http://eds.a.ebscohost.com/eds/detail/detail?vid=1&sid=64174bb1-2f01-4844-b4a0-8eb1916d5792%40sessionmgr4008&bdata=JnNpdGU9ZWRzLWxpdmU%3d#AN=edselc.2-52.0-0642312740&db=edselc},
	Year = {1996}}

@article{Reference6,
	Abstract = {The purpose of this thesis was to evaluate the most significant JavaScript frameworks in terms of a master data management (MDM) application development, and select the most feasible option for use in FCG Prodacapo Group. In the study, modern web application architecture and the differences between multi-page applications and single-page applications were exploited. The structure of JavaScript frame-works and libraries was introduced, and three of the most popular technologies were se-lected into the evaluation process: React.js, Angular and Vue.js. The selected frameworks were evaluated focusing on relevant factors in the development of an MDM application. These factors included the frameworks' structure, such as components, data binding and state management. Other aspects related to efficient development were considered as well, such as frameworks' popularity and prospects, documentation and de-veloper experience. The final selection was based on aspects seen as the most important considering the whole ensemble, such as frameworks' fulfillment of the general requirements for an MDM application, frameworks' continuation of development and high effectiveness. Considering these aspects, the evaluated factors were placed in order of significance, and on the basis of these aspects, Angular was chosen as the best choice for MDM application development. For verifying the feasibility of the selected framework (Angular), a test appli-cation was implemented. The test application included two pages, and functionalities for routing, data table and for server connections. The test application filled its objectives and verified the feasibility of the Angular framework. All evaluated frameworks were found to be suitable for fulling the needs. The evaluated factors were not equally important from the evaluation point-of-view, but the evaluation was based on aspects seen as the most important. The evaluation process is suitable on a more global scope as well, as the minimum requirements were not strictly MDM application spe-cific. According to the company, this thesis achieved its objectives comprehensively. It is highly probable that Angular will be used in MDM application development and as the com-pany's main front-end development platform.},
	Author = {Jaakko Voutilainen},
	Journal = {Metropolia University of Applied Sciences},
	Month = {12},
	Pages = {1-50},
	Title = {Evaluation of Front-end JavaScript Frameworks for Master Data Management Application Development},
	URL = {https://www.theseus.fi/bitstream/handle/10024/138668/Voutilainen_Jaakko.pdf?sequence=1&isAllowed=y},
	Year = {2017}}

@article{Reference7,
	Author = {M. Vaqqas},
	Journal = {Dr. Dobb's Journal},
	Month = {9},
	Title = {RESTful Web Services: A Tutorial},
	URL = {http://www.drdobbs.com/web-development/restful-web-services-a-tutorial/240169069},
	Year = {2014}}

@article{Reference8,
	Abstract = {Recent technology trends in the Web Services (WS) domain indicate that a solution eliminating the presumed complexity of the WS- standards may be in sight: advocates of REpresentational State Transfer (REST) have come to believe that their ideas explaining why the World Wide Web works are just as applicable to solve enterprise application integration problems and to simplify the plumbing required to build service-oriented architectures. In this paper we objectify the WS- vs. REST debate by giving a quantitative technical comparison based on architectural principles and decisions. We show that the two approaches differ in the number of architectural decisions that must be made and in the number of available alternatives. This discrepancy between freedom-from-choice and freedom-of-choice explains the complexity difference perceived. However, we also show that there are significant differences in the consequences of certain decisions in terms of resulting development and maintenance costs. Our comparison helps technical decision makers to assess the two integration styles and technologies more objectively and select the one that best fits their needs: REST is well suited for basic, ad hoc integration scenarios, WS- is more flexible and addresses advanced quality of service requirements commonly occurring in enterprise computing.},
	Author = {Cesare Pautasso and Olaf Zimmermann and Frank Leymann},
	Journal = {Proceedings of the 17th international conference on World Wide Web},
	Numpages = {10},
	Pages = {805-814},
	Title = {RESTful Web Services vs . “ Big ” Web Services : Making the Right Architectural Decision Categories and Subject Descriptors},
	URL = {http://wwwconference.org/www2008/papers/pdf/p805-pautassoA.pdf},
	Year = {2008}}

@article{Reference9,
	Abstract = {Web services are moving toward a new emerging technology lead to the migration of SOAP to RESTful API, which is an Architectural Style that holds Lightweight, Stateless, Uniform Interface, etc., as its constraints. Various sources of clusters of resources, entity, database relations are access throughout the distributed environment across the internet. Generative Power of the RESTful API witnesses the emergence of many companies whose whole business process is based upon the building applications. Since the Syntactic essentials of RESTful Web Services are mainly concerned with the RESTful API, there is a need for evaluation of those essentials whether they are computable or not. The proposed work is carried out on taking resources as simple and effective using Primitive Recursive Function (PRF). Primitive Recursive Function (PRF) uses Turing Machine for REST API capability evaluation and the Service Invocation along with the Application Logic and AppState Logic in order to handle manageability of the RESTful resources via computability evaluation with or without security. To demonstrate the effectiveness of our evaluation process, we conduct a case study on the available REST web services using Primitive Recursive Resources (PRR). The results of our case study show that our evaluation process achieves greater portability, reliability, scalability, etc., which in turn results in high performance.},
	Author = {R. Padmanaban and M. Thirumaran and P. Anitha and A. Moshika},
	Journal = {Journal of King Saud University - Computer and Information Sciences},
	Numpages = {10},
	Title = {Computability evaluation of RESTful API using Primitive Recursive Function},
	URL = {https://doi.org/10.1016/j.jksuci.2018.11.014},
	Year = {2018}}

@book{Reference10,
	Abstract = {This book aims to be the single most useful resource on learning React. By the time you’re done reading this book, you (and your team) will have everything you need to build reliable, powerful React apps.},
	Author = {Accomazzo, Anthony and Lerner, Ari and	Guttman, David and Murray, Nate and	Allsopp, Clay and McGinnis, Tyler},
	Numpages = {844},
	Title = {Fullstack React},
	URL = {https://www.fullstackreact.com/},
	Year = {2016}}

@article{Reference12,
	Abstract = {The main purpose of this final year thesis was to study a JavaScript based front-end library for web and mobile application development. There are many front-end application development frameworks and libraries at the moment. ReactJS library, one of the most recent web technologies, is one of them. It has been proven as the fastest rendering library. It focuses on the view part of the MVC pattern and is being widely adopted for big scale application development.},
	Author = {Naim, Naimul Islam},
	Month = {5},
	Numpages = {40},
	Title = {ReactJS : An Open Source JavaScript Library for Front-end Developement},
	URL = {http://www.theseus.fi/handle/10024/130495},
	Year = {2017}}

@book{Reference13,
	Abstract = {React Native has completely revolutionized mobile development by empowering JavaScript developers to build world-class mobile apps that run natively on mobile platforms. This book will show you how to apply JavaScript and other front-end skills to build cross-platform React Native applications for iOS and Android using a single codebase.
	
	This book will provide you with all the React Native building blocks necessary to become an expert. We’ll give you a brief explanation of the numerous native components and APIs that come bundled with React Native including Images, Views, ListViews, WebViews, and much more. You will learn to utilize form inputs in React Native. You’ll get an overview of Facebook’s Flux data architecture and then apply Redux to manage data with a remote API. You will also learn to animate different parts of your application, as well as routing using React Native’s navigation APIs.
	
	By the end of the book, you will be able to build cutting-edge applications using the React Native framework.},
	Author = {Eric Masiello and Jacob Friedmann},
	Month = {1},
	Numpages = {496},
	Title = {Mastering React Native},
	URL = {https://www.packtpub.com/web-development/mastering-react-native},
	Year = {2017}
}

@book{Reference14,
	Abstract = {Hit the ground running with React, the open-source technology from Facebook for building rich web applications fast. With this practical guide, Yahoo! web developer Stoyan Stefanov teaches you how to build components—React’s basic building blocks—and organize them into maintainable, large-scale apps. If you’re familiar with basic JavaScript syntax, you’re ready to get started.
	
	Once you understand how React works, you’ll build a complete custom Whinepad app that helps users rate wines and keep notes. You’ll quickly learn why some developers consider React the key to the web app development puzzle.},
	Publisher = {O'Reilly Media},
	Author = {Stoyan Stefanov},
	Month = {7},
	Numpages = {222},
	Title = {React: Up and Running},
	URL = {http://shop.oreilly.com/product/0636920042266.do},
	Year = {2016}}

@website{Reference15,
	Site = {IBM developerWorks},
	Author = {David Geary},
	Month = {7},
	Title = {Introducing Redux},
	URL = {https://developer.ibm.com/tutorials/wa-manage-state-with-redux-p1-david-geary/},
	Year = {2016}}

@website{Reference16,
	Author = {Facebook Open Source},
	Title = {React Official Website},
	URL = {https://reactjs.org/}}

@website{Reference17,
	Author = {Dan Abramov and the Redux documentation authors},
	Title = {Redux Official Website},
	URL = {https://redux.js.org/}}

@website{Reference18,
	Author = {IBM Website},
	Title = {What is Ajax?},
	URL = {https://www.ibm.com/support/knowledgecenter/SS8PJ7_9.1.1/com.ibm.etools.webtoolscore.doc/topics/cajax.html}}

@website{Reference19,
	Author = {Google},
	Title = {Angular Official Website},
	URL = {https://angular.io/}}

@website{Reference20,
	Author = {JSX},
	Title = {JSX Official Website},
	URL = {https://jsx.github.io/}}

@website{Reference21,
	Author = {Microsoft},
	Title = {Microsoft Official Website},
	URL = {https://docs.microsoft.com/en-us/dotnet/framework/wpf/data/data-binding-overview}}

@website{Typescript,
	Author = {Microsoft},
	Title = {TypeScript Official Website},
	URL = {https://www.typescriptlang.org/docs/handbook/decorators.html}}

@website{Ionic,
	Author = {Ionic Open Source},
	Title = {Ionic Official Website},
	URL = {https://ionicframework.com/docs/intro}}

@book{murray2018ng,
	title={Ng-Book: The Complete Guide to Angular 5},
	author={Murray, N. and Coury, F. and Lerner, A. and Taborda, C.},
	isbn={9780991344642},
	URL={https://books.google.gr/books?id=6\_AqtAEACAAJ},
	year={2018},
	publisher={Fullstack.io}}

@book{reactQuickly,
	title={React Quickly},
	author={Azat Mardan},
	isbn={9781617293344},
	URL={http://reactquickly.co/},
	year={2017},
	publisher={Manning}}

@book{angularUpandRunning,
	Abstract = {This book will demystify Angular as a framework, as well as provide clear instructions and examples on how to get started with writing scalable Angular applications.
	
	Angular: Up & Running covers most of the major pieces of Angular, but in a structured manner that is generally used in hands-on training. Each chapter takes one concept, and use examples to cover how it works. Problems to work on (with solutions) at the end of each chapter reinforce the learnings of each chapter and allow readers to really get hands-on with Angular.},
	Publisher = {O'Reilly Media},
	Author = {Shyam Seshadri},
	Month = {6},
	Numpages = {222},
	Title = {Angular: Up and Running},
	ISBN = {9781491999837},
	URL = {https://learning.oreilly.com/library/view/angular-up-and/9781491999820},
	Year = {2018}}


